---
author: chapter09
comments: true
date: 2012-04-17 15:30:37+00:00
layout: post
slug: java%e5%ad%98%e5%82%a8
title: Java存储
wordpress_id: 650
categories:
- Tech
post_format:
- Standard
tags:
- Java
---

1． 寄存器（register） 。这是最快的存储区，因为它位于不同于其他存储区的地方——处理器内部。但是寄存器的数量极其有限，所以寄存器由编译器根据需求进行分配。你不能直接控制，也不能在程序中感觉到寄存器存在的任何迹象。 
2． 堆栈（stack） 。位于通用 RAM（random-access memory，随机访问存储器）中，但通过它的“堆栈指针”可以从处理器那里获得直接支持。堆栈指针若向下移动，则分配新的内存；若向上移动，则释放那些内存。这是一种快速有效的分配存储方法，仅次于寄存器。创建程序时，Java 编译器必须知道存储在堆栈内所有数据的确切大小和生命周期，因为它必须生成相应的代码，以便上下移动堆栈指针。这一约束限制了程序的灵活性，所以虽然某些 Java 数据存储于堆栈中——特别是对象引用，但是 Java 对象并不存储于其中。 <!-- more -->
3． 堆（heap） 。一种通用性的内存池（也存在于 RAM 区） ，用于存放所有的 Java 对象。堆不同于堆栈的好处是：编译器不需要知道要从堆里分配多少存储区域，也不必知道存储的数据在堆里存活多长时间。因此，在堆里分配存储有很大的灵活性。当你需要创建一个对象时，只需用 new 写一行简单的代码，当执行这行代码时，会自动在堆里进行存储分配。当然，为这种灵活性必须要付出相应的代价。用堆进行存储分配比用堆栈进行存储存储需要更多的时间 （如果确实可以在 Java 中像在 C++中一样用栈保存对象） 。 
4． 静态存储 （static storage） 。 这里的 “静态” 是指 “在固定的位置” （尽管也在 RAM 里） 。静态存储里存放程序运行时一直存在的数据。你可用关键字 Static 来标识一个对象的特定元素是静态的，但 Java 对象本身从来不会存放在静态存储空间里。 
5． 常量存储 （constant storage） 。 常量值通常直接存放在程序代码内部， 这样做是安全的，因为它们永远不会被改变。有时，在嵌入式系统中，常量本身会和其它部分隔离开，所以在这种情况下， 可以选择将其存放在 ROM （read-only memory， 只读存储器） 中。 
6． 非 RAM 存储（non-RAM storage） 。如果数据完全存活于程序之外，那么它可以不受程序的任何控制，在程序没有运行时也可以存在。其中两个基本的例子是“流对象（streamed object） ”和“持久化对象（persistent object） ” 。在“流对象”中，对象转化成字节流，通常被发送给另一台机器。在“持久化对象”中，对象被存放于磁盘上，因此，即使程序终止，它们仍可以保持自己的状态。这种存储方式的技巧在于：把对象转化成可以存放在其它媒介上的事物，在需要时，可恢复成常规的、基于 RAM 的对象。Java 提供对轻量级持久化（lightweight persistence）的支持，未来的 Java 版本可能会为持久化提供更全面的解决方案。
