---
author: chapter09
comments: true
date: 2012-10-07 12:43:43+00:00
layout: post
slug: '898'
title: scoped_lock用法
wordpress_id: 898
categories:
- Tech
tags:
- C++
---

[code lang="c"]
rpcc::call1(unsigned int proc, marshall &amp;req, unmarshall &amp;rep,
                TO to)
{

        caller ca(0, &amp;rep);
        int xid_rep;
        {
                ScopedLock ml(&amp;m_);

                if((proc != rpc_const::bind &amp;&amp; !bind_done_) ||
                                (proc == rpc_const::bind &amp;&amp; bind_done_)){
                        jsl_log(JSL_DBG_1, &quot;rpcc::call1 rpcc has not been bound to dst or binding twicen&quot;);
                        return rpc_const::bind_failure;
                }

                if(destroy_wait_){
                        return rpc_const::cancel_failure;
                }

                ca.xid = xid_++;
                calls_[ca.xid] = &amp;ca;

                req_header h(ca.xid, proc, clt_nonce_, srv_nonce_,
                                xid_rep_window_.front());
                req.pack_req_header(h);
                xid_rep = xid_rep_window_.front();
        }

        TO curr_to;
        struct timespec now, nextdeadline, finaldeadline;
[/code]

很久不用C，因此对其认识愈发肤浅。今天读代码看到一段，通过在函数内加入一个局部作用域，然后声明一个ScopedLock ml(&m;_)实现对整个局部作用域的锁。可以看看ScopedLock的实现：

[code lang="c"]
struct ScopedLock {
        private:
                pthread_mutex_t *m_;
        public:
                ScopedLock(pthread_mutex_t *m): m_(m) {
                        VERIFY(pthread_mutex_lock(m_)==0);
                }
                ~ScopedLock() {
                        VERIFY(pthread_mutex_unlock(m_)==0);
                }
};
#endif  /*__SCOPED_LOCK__*/
[/code]

发现在局部作用于结束时将调用ScopedLock的析构函数

其实，就算没有流程控制语句，我们也可以根据需要，在代码中直接加上一对{}，人为地制造一个“局部作用域”。比如在某个函数中：
[code lang="c"]
void func()
{
   int a = 100;
   cout << a << endl;
 
   {
      int a = 200;
      cout << a << endl;
   }
 
   cout << a << endl;  
}
[/code]
代码中包含我们制造的一个局部作用域。执行该函数，将有如下输出：
100
200
100

reference:
[http://17de.com/library/CPP/ls15.htm#15.2.1](http://17de.com/library/CPP/ls15.htm#15.2.1)
